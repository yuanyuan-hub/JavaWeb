class MyCircularQueue {
    int[] array;
    int head;
    int tail;

    public MyCircularQueue(int k) {
        this.array = new int[k];
        for(int i = 0; i < k; i++) {
            array[i] = -1;
        }
    }
    
    public boolean enQueue(int value) {
        if(isFull()) return false;
        array[tail] = value;
        tail++;
        if(tail == array.length) tail = 0;
        return true;
    }
    
    public boolean deQueue() {
        if(isEmpty()) return false;
        array[head] = -1;
        head++;
        if(head == array.length) head = 0;
        return true;

    }
    
    public int Front() {
        return array[head];

    }
    
    public int Rear() {
        if(tail - 1 < 0) return array[array.length - 1];
        return array[tail - 1];

    }
    
    public boolean isEmpty() {
        return tail == head && array[head] == -1;

    }
    
    public boolean isFull() {
        return tail == head && array[head] != -1;

    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
